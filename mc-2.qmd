---
title: "Multivariate Sampling"
format: html
---

Both analytic and accept/reject methods can be used to generate distributions of more than one variable. This often requires a bit of thought - the two methods may be more or less suitable to particular problems.

Here we illustrate the two approaches to generating uniformly distributed random numbers on the unit disc.


## Analytic Example

An analytic method for the unit disc problem needs to ensure that the density of points is constant over the disc, ie that $P(x,y) \propto dA$ for area element $dA$. In polar coordinates, we can write this as :

$$P(x,y) \propto dA = r dr d\phi$$

Since we will start by generating values with uniform distributions (let's say $u$ and $v$), we want to obtain transformations $(u,v) \rightarrow (r, \phi)$ such that :

$$dA = r dr d\phi= du dv$$

Clearly these substitutions are sufficient :

$$du = r dr$$
$$dv = d\phi$$

Clearly we can just generate $\phi$ with a uniform distribution.  The function to produce $r$ from uniformly distributed $u$ is obtained by integration  :

$$u = \frac{1}{2}r^2$$

and

$$r = \sqrt{2u}$$

However, this will produce a disc with incorrect area.  The required area is $\pi$, so we can obtain the constant of integration by requiring $\int dA = \pi$, which gives :

$$r = \sqrt{u}$$

```{python}
import numpy as np
import matplotlib.pyplot as plt

def unitDiscAna():
    phi = 2 * np.pi * np.random.random()
    r = np.sqrt(np.random.random())
    
    # convert to cartesian coordinates
    x = r * np.cos(phi)
    y = r * np.sin(phi)
    
    return np.array([x, y])

ps = np.array([unitDiscAna() for _ in range(1000)])

plt.axis('equal')
plt.scatter(ps[:,0], ps[:,1], marker='.', c='r')
plt.show()
```


## Accept/Reject Example

Suppose we want to randomly generate points $(x,y)$ within a unit disc.  A simple approach is to generate uniform distributions of $x$ and $y$ separately, and then use an accept/reject method to remove any points not in the disc (ie. where $\sqrt{x^2 + y^2} \gt 1$).  This is illustrated in the example below.

```{python}
def unitDiscAR():
    x = 2 * np.random.random() - 1
    y = 2 * np.random.random() - 1
    while np.sqrt(x**2+ y**2) > 1:
        x = 2 * np.random.random() - 1
        y = 2 * np.random.random() - 1
    return np.array([x, y])

ps = np.array([unitDiscAR() for _ in range(1000)])

plt.axis('equal')
plt.scatter(ps[:,0], ps[:,1], marker='.', c='r')
plt.show()
```

Note that since the `unitDisc()` method returns a vector, we need to :

  1. convert the list generated by the list comprehension (which calls `unitDisc()` many times) into a 2D array
  2. use array slicing to obtain arrays of $x$ and $y$ values separately when plotting, ie. `ps[:,0]` gives a 1D array of $x$ values.